import { useEffect, useState } from "react";
import { Writable, Readable, get } from "svelte/store";

const isWritable = <T>(store: Writable<T> | Readable<T>): store is Writable<T> => {
  return (store as Writable<T>).update !== undefined;
};

// generated by Chat GPT
export type StoreTuple<T> = T extends Writable<infer U>
  ? // CASE: if T is a Writable, the tuple should be [value, set, update]
    [U, Writable<U>["set"], Writable<U>["update"]]
  : // CASE: if T is a Readable, the tuple should be [value]
  T extends Readable<infer U>
  ? [U]
  : // ELSE: it is invalid
    [never];

/**
 * Use the value of a store as a react hook
 * @example
 * // use a readable or derived store:
 * const [value] = useStore(readableStore);
 * // use a writable store:
 * const [value, setValue] = useStore(writableStore);
 */
const useStore = <U, T extends Writable<U> | Readable<U>>(store: T) => {
  const [value, setState] = useState(get(store));

  useEffect(() => {
    return store.subscribe((v) => setState(v));
  }, [store]);

  return [value, ...(isWritable(store) ? [store.set, store.update] : [])] as StoreTuple<T>;
};

export default useStore;
